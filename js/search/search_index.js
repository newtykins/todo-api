var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.346,1,1.883]],["body/controllers/AppController.html",[0,2.12,1,2.966,2,1.699,3,0.653,4,0.653,5,0.575,6,3.157,7,0.736,8,1.563,9,4.495,10,2.711,11,0.039,12,1.253,13,3.835,14,1.253,15,2.357,16,0.815,17,0.575,18,2.569,19,3.157,20,0.653,21,0.653,22,1.889,23,2.377,24,1.386,25,3.835,26,0.025,27,0.031,28,0.025]],["title/modules/AppModule.html",[29,1.497,30,1.883]],["body/modules/AppModule.html",[1,3.038,2,1.949,3,0.573,4,0.573,5,0.504,11,0.039,16,0.919,17,0.504,18,2.727,19,2.766,20,0.573,21,0.573,26,0.022,27,0.028,28,0.022,29,2.166,30,3.619,31,1.655,32,2.166,33,2.766,34,2.766,35,2.766,36,3.047,37,3.047,38,2.726,39,2.083,40,1.85,41,3.36,42,3.108,43,3.62,44,3.36,45,3.36,46,3.36]],["title/injectables/AppService.html",[18,1.497,47,0.239]],["body/injectables/AppService.html",[3,0.685,4,0.685,5,0.603,7,0.772,8,1.609,9,4.57,11,0.039,12,1.313,14,1.313,15,2.426,16,0.685,17,0.603,18,2.426,20,0.685,21,0.685,24,1.452,26,0.026,27,0.032,28,0.026,47,0.388,48,1.187,49,3.308,50,4.018,51,4.018,52,4.018]],["title/controllers/AuthController.html",[0,1.346,53,1.883]],["body/controllers/AuthController.html",[0,0.892,2,0.892,3,0.343,4,0.343,5,0.302,7,0.386,8,0.999,10,2.919,11,0.04,12,1.349,14,1.349,16,0.828,17,0.302,20,0.343,21,0.343,22,0.991,24,1.492,26,0.013,27,0.02,28,0.013,53,1.895,54,1.657,55,1.657,56,3.697,57,3.057,58,1.87,59,3.057,60,2.161,61,2.517,62,2.012,63,2.012,64,2.012,65,3.057,66,1.651,67,1.651,68,1.651,69,3.012,70,2.012,71,5.128,72,4.859,73,2.012,74,2.012,75,3.656,76,3.057,77,1.105,78,1.683,79,2.012,80,2.012,81,2.012,82,3.057,83,2.012,84,3.057,85,2.012,86,3.057,87,2.292,88,1.657,89,0.991,90,1.108,91,1.422,92,1.478,93,1.247,94,1.108,95,2.012,96,1.247,97,2.012,98,1.247,99,2.012,100,2.012,101,2.012,102,2.012,103,2.012,104,2.012,105,2.012,106,2.012,107,3.057,108,3.399,109,2.034,110,2.56,111,3.057,112,2.919,113,1.355,114,2.012,115,2.012,116,3.057,117,1.895,118,3.057,119,3.057,120,4.129,121,2.292,122,3.057,123,1.657,124,2.012,125,2.012,126,2.012,127,2.012,128,2.012,129,2.012,130,2.012,131,2.012,132,2.012]],["title/modules/AuthModule.html",[29,1.497,36,1.672]],["body/modules/AuthModule.html",[2,1.701,3,0.468,4,0.468,5,0.413,11,0.04,16,0.946,17,0.413,20,0.468,21,0.468,26,0.018,27,0.025,28,0.018,29,1.891,31,1.355,32,1.891,36,3.219,38,2.38,39,1.705,40,1.514,42,2.714,43,2.264,53,2.742,92,2.292,93,1.705,133,2.264,134,2.264,135,2.264,136,2.872,137,2.872,138,2.086,139,2.872,140,2.75,141,3.161,142,3.839,143,1.099,144,2.75,145,2.75,146,1.944,147,2.75,148,1.705,149,2.75,150,2.75,151,2.75,152,2.75,153,1.944,154,2.75,155,2.75,156,2.75,157,2.75,158,1.944]],["title/injectables/AuthService.html",[47,0.239,92,1.215]],["body/injectables/AuthService.html",[3,0.189,4,0.189,5,0.167,7,0.213,8,0.618,11,0.04,12,1.24,14,1.645,15,2.481,16,0.681,17,0.167,20,0.189,21,0.189,23,2.026,24,1.371,26,0.021,27,0.012,28,0.007,47,0.149,48,0.328,58,1.963,60,2.514,61,1.556,66,1.422,67,1.422,68,1.422,77,1.371,90,0.611,91,0.785,92,0.756,109,2.191,110,3.156,112,3.224,113,1.682,138,1.165,146,0.785,148,0.688,159,0.785,160,1.556,161,2.928,162,1.89,163,1.89,164,2.468,165,2.468,166,1.04,167,0.914,168,3.795,169,1.11,170,1.336,171,1.89,172,2.651,173,1.11,174,2.914,175,1.806,176,2.69,177,3.556,178,2.914,179,1.89,180,1.11,181,1.89,182,2.825,183,1.89,184,4.146,185,1.11,186,1.89,187,4.273,188,3.554,189,3.556,190,3.556,191,3.517,192,1.11,193,1.11,194,2.399,195,4.753,196,2.399,197,2.31,198,1.957,199,3.554,200,1.436,201,2.204,202,1.11,203,1.11,204,0.785,205,0.688,206,1.436,207,1.11,208,1.336,209,1.556,210,0.688,211,1.11,212,0.914,213,1.556,214,0.914,215,0.914,216,2.928,217,1.556,218,2.825,219,1.556,220,1.89,221,1.11,222,1.11,223,2.468,224,1.04,225,1.11,226,1.11,227,1.11,228,1.11,229,1.11,230,2.468,231,1.11,232,1.11,233,1.89,234,1.11,235,1.556,236,1.11,237,1.11,238,1.11,239,1.11,240,0.914,241,1.11,242,1.11,243,1.11,244,1.89,245,1.11,246,1.11,247,1.11,248,1.11,249,1.11,250,1.11,251,1.11,252,1.11,253,0.785,254,0.785]],["title/injectables/JwtAuthGuard.html",[47,0.239,94,1.672]],["body/injectables/JwtAuthGuard.html",[3,0.722,4,0.722,5,0.636,11,0.038,16,0.867,17,0.636,20,0.722,21,0.722,26,0.027,27,0.033,28,0.027,47,0.401,48,1.252,94,2.801,143,1.695,255,3.491,256,2.997,257,1.879,258,4.24]],["title/injectables/JwtStrategy.html",[47,0.239,136,1.672]],["body/injectables/JwtStrategy.html",[3,0.508,4,0.508,5,0.447,7,0.572,8,1.326,11,0.04,12,1.326,14,0.974,16,0.844,17,0.447,20,0.508,21,0.508,24,1.467,26,0.019,27,0.026,28,0.019,47,0.32,48,0.88,58,1.845,66,1.192,67,1.192,68,1.192,69,1.848,77,1.077,78,1.641,89,1.468,109,1.468,117,1.848,121,1.848,136,2.234,143,1.192,153,2.107,158,2.107,166,2.541,172,1.468,175,2.516,191,2.869,198,1.641,200,1.468,201,2.516,206,1.468,224,1.641,257,1.321,259,2.454,260,2.869,261,2.98,262,4.059,263,2.98,264,3.799,265,2.454,266,2.107,267,1.641,268,2.107,269,2.869,270,3.341,271,2.107,272,2.107,273,2.454,274,2.98,275,2.454,276,2.454,277,2.454,278,2.454,279,2.98,280,2.454,281,2.107,282,2.454,283,2.107,284,2.107]],["title/injectables/LocalAuthGuard.html",[47,0.239,96,1.883]],["body/injectables/LocalAuthGuard.html",[3,0.722,4,0.722,5,0.636,11,0.038,16,0.867,17,0.636,20,0.722,21,0.722,26,0.027,27,0.033,28,0.027,47,0.401,48,1.252,96,3.154,143,1.695,256,2.997,257,1.879,285,3.491,286,4.24]],["title/injectables/LocalStrategy.html",[47,0.239,137,1.672]],["body/injectables/LocalStrategy.html",[3,0.501,4,0.501,5,0.441,7,0.565,8,1.315,11,0.039,12,1.315,14,0.961,15,2.625,16,0.84,17,0.441,20,0.501,21,0.501,22,1.45,24,1.063,26,0.019,27,0.026,28,0.019,47,0.317,48,0.869,58,1.833,66,1.609,67,1.609,68,1.609,77,1.454,92,2.13,93,1.824,109,1.45,113,1.304,137,2.215,143,1.177,166,1.62,172,2.542,182,2.844,184,4.057,187,2.422,197,2.08,198,1.62,199,2.422,200,1.45,206,1.45,224,1.62,257,1.304,260,3.241,266,2.08,267,1.62,268,2.08,269,2.844,271,2.08,272,2.08,281,2.08,282,2.422,283,2.08,284,2.08,287,2.422,288,2.422,289,2.942,290,4.023,291,2.942,292,3.312,293,2.942,294,2.942,295,2.942,296,2.942]],["title/injectables/PrismaService.html",[47,0.239,138,1.215]],["body/injectables/PrismaService.html",[3,0.577,4,0.577,5,0.508,7,0.65,8,1.444,11,0.039,12,1.444,14,1.444,16,0.753,17,0.508,20,0.577,21,0.577,26,0.022,27,0.029,28,0.022,47,0.348,48,0.999,58,2.259,66,1.353,67,1.353,68,1.353,77,1.223,113,1.958,138,1.767,210,2.098,257,1.958,297,2.787,298,4.918,299,4.418,300,5.547,301,4.418,302,5.214,303,3.385,304,3.385,305,3.385,306,3.385,307,3.385,308,3.385,309,3.385]],["title/injectables/RefreshAuthGuard.html",[47,0.239,98,1.883]],["body/injectables/RefreshAuthGuard.html",[3,0.722,4,0.722,5,0.636,11,0.038,16,0.867,17,0.636,20,0.722,21,0.722,26,0.027,27,0.033,28,0.027,47,0.401,48,1.252,98,3.154,143,1.695,256,2.997,257,1.879,310,3.491,311,4.24]],["title/injectables/RefreshStrategy.html",[47,0.239,139,1.672]],["body/injectables/RefreshStrategy.html",[3,0.418,4,0.418,5,0.368,7,0.471,8,1.156,11,0.04,12,1.156,14,0.801,16,0.821,17,0.368,20,0.418,21,0.418,22,1.207,23,1.519,24,1.278,26,0.016,27,0.023,28,0.016,47,0.279,48,0.724,58,1.66,60,3.551,66,1.415,67,1.415,68,1.415,69,2.193,77,1.278,78,1.349,89,1.207,92,2.009,93,1.519,108,2.912,109,1.743,110,2.989,113,1.086,117,2.574,121,1.519,139,1.947,143,0.98,153,1.732,158,1.732,166,1.349,172,2.24,175,2.193,196,2.017,198,2.285,200,1.207,201,2.193,206,2.045,208,1.732,224,2.285,240,2.017,257,1.086,260,2.935,264,4.136,265,2.017,266,1.732,267,1.349,268,1.732,270,3.969,271,1.732,272,1.732,273,2.017,275,2.017,276,2.017,277,2.017,278,2.912,280,2.017,283,1.732,284,1.732,288,2.017,312,2.017,313,2.45,314,3.538,315,2.45,316,2.45,317,2.45,318,3.538,319,2.45,320,2.45,321,2.45,322,2.45,323,2.45,324,3.538,325,2.45]],["title/controllers/TodoController.html",[0,1.346,326,1.883]],["body/controllers/TodoController.html",[0,0.945,2,0.945,3,0.363,4,0.363,5,0.32,7,0.41,8,1.044,10,3.219,11,0.039,12,1.488,14,1.488,16,0.653,17,0.32,20,0.363,21,0.363,22,1.051,24,1.646,26,0.014,27,0.021,28,0.014,55,1.756,58,2.246,66,1.821,67,1.821,68,1.821,69,3.34,75,3.501,78,2.507,87,3.231,88,1.756,94,1.174,113,2.018,123,3.75,218,3.006,326,1.98,327,1.756,328,1.322,329,2.63,330,2.63,331,2.63,332,3.195,333,2.63,334,2.133,335,2.133,336,2.133,337,4.253,338,2.133,339,5.212,340,2.133,341,2.133,342,3.153,343,4.781,344,2.133,345,2.133,346,2.133,347,2.133,348,2.133,349,2.133,350,2.133,351,2.133,352,2.133,353,3.83,354,2.133,355,1.887,356,1.756,357,2.133,358,2.133,359,2.133,360,2.133,361,2.133,362,2.133,363,3.83,364,2.133,365,2.133,366,2.133,367,2.133,368,2.133,369,2.133,370,2.133,371,2.133,372,2.133,373,1.756,374,2.133,375,2.133,376,2.133]],["title/modules/TodoModule.html",[29,1.497,37,1.672]],["body/modules/TodoModule.html",[2,1.972,3,0.583,4,0.583,5,0.513,11,0.039,16,0.892,17,0.513,20,0.583,21,0.583,26,0.022,27,0.029,28,0.022,29,2.192,31,1.686,32,2.192,37,3.196,38,2.759,39,2.122,40,1.884,42,3.145,138,2.225,141,3.663,148,2.122,326,3.065,355,2.924,356,2.818,377,2.818,378,2.818,379,2.818,380,3.422,381,3.422]],["title/injectables/TodoService.html",[47,0.239,355,1.497]],["body/injectables/TodoService.html",[3,0.184,4,0.184,5,0.162,7,0.207,8,0.603,11,0.04,12,1.289,14,1.476,15,2.225,16,0.487,17,0.162,20,0.184,21,0.184,22,0.531,23,1.773,24,1.352,26,0.007,27,0.012,28,0.007,47,0.145,48,0.319,58,2.112,66,1.496,67,1.496,68,1.496,77,1.352,78,1.33,87,1.143,90,0.594,91,0.763,109,1.844,113,1.95,121,2.647,138,1.143,148,0.669,160,1.519,161,2.883,166,0.594,167,0.888,170,1.304,172,2.276,176,2.883,182,2.475,188,4.163,191,3.111,197,1.708,198,1.015,200,0.531,204,0.763,205,0.669,206,1.725,208,2.021,210,0.669,217,2.354,218,3.111,219,0.888,224,1.928,235,0.888,253,3.846,254,0.763,269,0.763,281,2.789,328,3.57,329,1.519,330,1.519,331,1.519,333,1.519,342,0.888,355,0.909,373,3.515,382,0.888,383,1.845,384,1.845,385,1.079,386,1.845,387,4.999,388,1.079,389,1.845,390,4.794,391,2.86,392,1.845,393,4.712,394,1.079,395,1.845,396,3.945,397,1.845,398,1.079,399,2.86,400,1.845,401,1.079,402,2.86,403,1.845,404,1.079,405,2.354,406,1.845,407,3.213,408,2.416,409,1.079,410,1.845,411,1.079,412,0.763,413,1.079,414,1.845,415,1.079,416,1.079,417,1.079,418,1.845,419,1.845,420,1.079,421,1.079,422,1.079,423,1.519,424,1.079,425,1.079,426,2.416,427,1.079,428,3.213,429,2.416,430,1.845,431,1.845,432,1.845,433,1.845,434,1.079,435,1.079,436,1.079,437,1.079,438,1.079,439,1.845,440,1.079,441,1.079]],["title/coverage.html",[442,3.385]],["body/coverage.html",[0,2.08,1,1.909,5,0.462,6,2.536,11,0.039,18,1.517,26,0.02,27,0.027,28,0.02,47,0.453,49,2.536,53,1.909,54,2.536,77,1.113,90,1.695,92,1.232,94,1.695,96,1.909,98,1.909,136,1.695,137,1.695,138,1.232,139,1.695,159,2.177,206,1.517,255,2.536,259,2.536,285,2.536,287,2.536,297,2.536,310,2.536,312,2.536,326,1.909,327,2.536,355,1.517,382,2.536,412,2.177,442,2.536,443,2.536,444,3.08,445,3.08,446,4.731,447,4.15,448,3.08,449,3.08,450,3.08,451,3.08,452,5.022,453,5.022,454,2.933,455,4.15,456,4.15,457,4.15,458,2.536,459,3.08,460,2.536,461,3.08,462,3.08,463,3.08,464,3.08,465,3.08,466,3.08]],["title/dependencies.html",[32,1.795,467,2.554]],["body/dependencies.html",[11,0.04,17,0.527,26,0.023,27,0.029,28,0.023,32,1.731,87,2.178,89,1.731,110,2.178,117,2.178,143,1.405,146,2.484,175,2.178,209,2.893,210,2.178,212,2.893,213,2.893,267,2.756,292,2.893,468,5.288,469,3.514,470,3.514,471,3.514,472,3.514,473,3.514,474,4.526,475,3.514,476,3.514,477,3.514,478,3.514,479,3.514,480,3.514,481,3.514,482,3.514,483,3.514,484,3.514,485,3.514,486,3.514,487,3.514,488,3.514,489,3.514,490,3.514,491,3.514,492,3.514,493,3.514,494,3.514]],["title/miscellaneous/enumerations.html",[495,1.021,496,3]],["body/miscellaneous/enumerations.html",[7,0.845,11,0.037,26,0.028,27,0.034,28,0.028,205,3.225,328,2.729,446,3.624,454,3.111,495,1.76,496,3.624,497,5.202,498,3.624,499,4.402,500,4.402]],["title/miscellaneous/functions.html",[495,1.021,501,3]],["body/miscellaneous/functions.html",[7,0.874,11,0.034,26,0.029,27,0.034,28,0.029,458,3.749,460,4.624,495,1.821,501,3.749,502,4.554]],["title/index.html",[7,0.49,503,2.103,504,2.103]],["body/index.html",[11,0.031,26,0.025,27,0.031,28,0.025,89,1.874,170,2.688,267,2.094,328,2.358,405,3.131,505,4.76,506,3.803,507,3.803,508,3.803,509,3.803,510,4.76,511,3.803,512,3.803,513,3.803,514,3.803,515,4.76,516,3.803,517,3.803,518,3.803,519,3.803,520,3.803,521,3.803,522,3.803,523,3.803,524,4.76,525,3.803,526,3.803,527,3.803,528,3.803,529,3.803,530,3.803,531,3.803,532,3.803,533,3.803,534,3.803,535,3.803,536,3.803,537,3.803,538,3.803,539,3.803,540,3.803,541,3.803,542,3.131,543,3.803]],["title/license.html",[503,2.103,504,2.103,542,2.103]],["body/license.html",[11,0.028,26,0.021,27,0.028,28,0.021,40,1.791,89,1.603,200,1.603,423,2.679,443,2.679,544,4.824,545,3.254,546,3.254,547,4.305,548,3.254,549,3.254,550,3.254,551,3.254,552,3.254,553,3.254,554,4.305,555,5.749,556,3.254,557,3.254,558,3.254,559,4.824,560,3.254,561,4.305,562,3.254,563,3.254,564,4.305,565,3.254,566,3.254,567,3.254,568,3.254,569,3.254,570,3.254,571,3.254,572,4.305,573,3.254,574,3.254,575,3.254,576,3.254,577,3.254,578,3.254,579,3.254,580,4.305,581,4.305,582,3.254,583,3.254,584,3.254,585,3.254,586,3.254,587,3.254,588,3.254,589,3.254,590,3.254,591,3.254,592,3.254,593,3.254,594,3.254,595,3.254,596,3.254,597,3.254,598,3.254,599,3.254,600,3.254,601,3.254,602,3.254,603,3.254,604,3.254,605,3.254,606,3.254,607,3.254,608,3.254]],["title/modules.html",[31,2.026]],["body/modules.html",[11,0.034,26,0.028,27,0.034,28,0.028,30,2.716,31,2.158,36,2.411,37,2.411,609,5.527,610,5.527,611,5.527,612,5.527]],["title/overview.html",[613,3.385]],["body/overview.html",[2,1.417,11,0.038,18,2.356,26,0.021,27,0.028,28,0.021,30,3.508,31,1.575,32,2.096,33,2.632,34,2.632,35,2.632,36,3.269,37,3.115,38,2.638,39,1.982,40,1.76,48,0.944,92,2.228,133,2.632,134,2.632,135,2.632,136,2.633,137,2.633,138,2.039,139,2.633,355,2.745,377,2.632,378,2.632,379,2.632,613,2.632,614,4.255,615,3.197]],["title/miscellaneous/typealiases.html",[495,1.021,616,3.644]],["body/miscellaneous/typealiases.html",[7,0.857,11,0.036,26,0.029,27,0.034,28,0.029,77,1.614,112,3.156,159,3.156,214,4.319,215,3.676,216,3.676,495,1.786,617,4.465,618,4.465]],["title/miscellaneous/variables.html",[495,1.021,619,3]],["body/miscellaneous/variables.html",[7,0.736,11,0.039,15,1.889,26,0.025,27,0.031,28,0.025,90,2.634,172,2.69,194,3.157,201,2.377,204,3.382,205,2.966,253,2.711,254,2.711,412,3.382,454,2.711,495,1.533,498,3.939,619,3.157,620,3.835,621,3.835,622,3.835,623,3.835,624,3.835,625,3.835,626,3.835,627,3.835,628,5.215,629,3.835,630,3.835]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":446,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["0.1.13",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":499,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["1.0.0",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":615,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["1m",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.28.0",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":545,"title":{},"body":{"license.html":{}}}],["3",{"_index":614,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["5.0.1",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":579,"title":{},"body":{"license.html":{}}}],["access",{"_index":281,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TodoService.html":{}}}],["account",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":603,"title":{},"body":{"license.html":{}}}],["add",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["against",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshStrategy.html":{}}}],["algorithm",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["algorithms",{"_index":280,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["aliases",{"_index":617,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":537,"title":{},"body":{"index.html":{}}}],["alongside",{"_index":512,"title":{},"body":{"index.html":{}}}],["already",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["and/or",{"_index":570,"title":{},"body":{"license.html":{}}}],["api",{"_index":505,"title":{},"body":{"index.html":{}}}],["api/auth/login",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/auth/profile",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/auth/refresh",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/auth/register",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/todo",{"_index":337,"title":{},"body":{"controllers/TodoController.html":{}}}],["api/todo/:id",{"_index":343,"title":{},"body":{"controllers/TodoController.html":{}}}],["app",{"_index":304,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":309,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":30,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":606,"title":{},"body":{"license.html":{}}}],["associated",{"_index":556,"title":{},"body":{"license.html":{}}}],["async",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["attempt",{"_index":293,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["auth",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["auth/auth.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":53,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}}}],["authguard",{"_index":256,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/RefreshAuthGuard.html":{}}}],["authguard('jwt",{"_index":258,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":286,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard('refresh",{"_index":311,"title":{},"body":{"injectables/RefreshAuthGuard.html":{}}}],["authmodule",{"_index":36,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":596,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":92,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["badrequestexception",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}}}],["badrequestexception('invalid",{"_index":318,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["badrequestexception('refresh",{"_index":325,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["badrequestexception('the",{"_index":420,"title":{},"body":{"injectables/TodoService.html":{}}}],["badrequestexception('wrong",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"dependencies.html":{}}}],["body.password",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.status",{"_index":376,"title":{},"body":{"controllers/TodoController.html":{}}}],["body.text",{"_index":374,"title":{},"body":{"controllers/TodoController.html":{}}}],["body.todo",{"_index":366,"title":{},"body":{"controllers/TodoController.html":{}}}],["boolean",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":460,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":612,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":609,"title":{},"body":{"modules.html":{}}}],["catch",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["charge",{"_index":551,"title":{},"body":{"license.html":{}}}],["checklist",{"_index":536,"title":{},"body":{"index.html":{}}}],["checks",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":599,"title":{},"body":{"license.html":{}}}],["class",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["cliche",{"_index":520,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_todomodule",{"_index":377,"title":{},"body":{"modules/TodoModule.html":{},"overview.html":{}}}],["cluster_todomodule_exports",{"_index":378,"title":{},"body":{"modules/TodoModule.html":{},"overview.html":{}}}],["cluster_todomodule_providers",{"_index":379,"title":{},"body":{"modules/TodoModule.html":{},"overview.html":{}}}],["code's",{"_index":541,"title":{},"body":{"index.html":{}}}],["collaborate",{"_index":539,"title":{},"body":{"index.html":{}}}],["coming",{"_index":531,"title":{},"body":{"index.html":{}}}],["comparing",{"_index":294,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["completed",{"_index":500,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["conditions",{"_index":578,"title":{},"body":{"license.html":{}}}],["connection",{"_index":607,"title":{},"body":{"license.html":{}}}],["const",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}}}],["constructor",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}}}],["constructor(authservice",{"_index":288,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["constructor(prisma",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["contain",{"_index":438,"title":{},"body":{"injectables/TodoService.html":{}}}],["continue",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["contract",{"_index":604,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TodoController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('todo",{"_index":357,"title":{},"body":{"controllers/TodoController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"overview.html":{}}}],["cookie",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["cookie.refreshtoken",{"_index":323,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["cookie?.refreshtoken",{"_index":320,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["copies",{"_index":572,"title":{},"body":{"license.html":{}}}],["copy",{"_index":554,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":544,"title":{},"body":{"license.html":{}}}],["cors",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":442,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["created",{"_index":427,"title":{},"body":{"injectables/TodoService.html":{}}}],["creates",{"_index":389,"title":{},"body":{"injectables/TodoService.html":{}}}],["createtodo",{"_index":329,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["createtodo(@req",{"_index":364,"title":{},"body":{"controllers/TodoController.html":{}}}],["createtodo(req",{"_index":334,"title":{},"body":{"controllers/TodoController.html":{}}}],["createtodo(userid",{"_index":386,"title":{},"body":{"injectables/TodoService.html":{}}}],["credentials",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["damages",{"_index":600,"title":{},"body":{"license.html":{}}}],["data",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TodoService.html":{}}}],["data.token",{"_index":279,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["database",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TodoService.html":{}}}],["date",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["day').unix",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["db",{"_index":319,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["deal",{"_index":558,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":608,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TodoController.html":{}}}],["default",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["delete",{"_index":342,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["delete('/:id",{"_index":367,"title":{},"body":{"controllers/TodoController.html":{}}}],["deleted",{"_index":435,"title":{},"body":{"injectables/TodoService.html":{}}}],["deletes",{"_index":395,"title":{},"body":{"injectables/TodoService.html":{}}}],["deletetodo",{"_index":330,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["deletetodo(@req",{"_index":368,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodo(req",{"_index":338,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodo(userid",{"_index":392,"title":{},"body":{"injectables/TodoService.html":{}}}],["demonstrate",{"_index":526,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":32,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["development",{"_index":511,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":568,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":443,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dotenv",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["easy",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enableshutdownhooks",{"_index":299,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":301,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":530,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["ensure",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}}}],["enumerations",{"_index":496,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":419,"title":{},"body":{"injectables/TodoService.html":{}}}],["event",{"_index":595,"title":{},"body":{"license.html":{}}}],["eventually",{"_index":532,"title":{},"body":{"index.html":{}}}],["exist",{"_index":418,"title":{},"body":{"injectables/TodoService.html":{}}}],["exists",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshStrategy.html":{}}}],["experience",{"_index":518,"title":{},"body":{"index.html":{}}}],["expired",{"_index":324,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["expiresin",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["exports",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"modules/TodoModule.html":{}}}],["express",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["extends",{"_index":257,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{}}}],["extractjwt",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":277,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["false",{"_index":274,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{}}}],["files",{"_index":557,"title":{},"body":{"license.html":{}}}],["find",{"_index":430,"title":{},"body":{"injectables/TodoService.html":{}}}],["finds",{"_index":415,"title":{},"body":{"injectables/TodoService.html":{}}}],["fitness",{"_index":591,"title":{},"body":{"license.html":{}}}],["following",{"_index":577,"title":{},"body":{"license.html":{}}}],["formats",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatuserlog",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TodoService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["formatuserlog(req.user",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["formatuserlog(user",{"_index":429,"title":{},"body":{"injectables/TodoService.html":{}}}],["found",{"_index":421,"title":{},"body":{"injectables/TodoService.html":{}}}],["free",{"_index":550,"title":{},"body":{"license.html":{}}}],["front",{"_index":529,"title":{},"body":{"index.html":{}}}],["fun",{"_index":523,"title":{},"body":{"index.html":{}}}],["function",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":501,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":575,"title":{},"body":{"license.html":{}}}],["generate",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["generates",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id",{"_index":360,"title":{},"body":{"controllers/TodoController.html":{}}}],["get('profile",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["getjwttoken",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["getjwttoken(user",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["getprofile",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@req",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["getrefreshtoken",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshtoken(user",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["gets",{"_index":402,"title":{},"body":{"injectables/TodoService.html":{}}}],["getstatus",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":503,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettodo",{"_index":331,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["gettodo(@req",{"_index":361,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodo(req",{"_index":344,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodo(userid",{"_index":397,"title":{},"body":{"injectables/TodoService.html":{}}}],["getuser",{"_index":383,"title":{},"body":{"injectables/TodoService.html":{}}}],["getuser(userid",{"_index":400,"title":{},"body":{"injectables/TodoService.html":{}}}],["getusertodos",{"_index":384,"title":{},"body":{"injectables/TodoService.html":{}}}],["getusertodos(userid",{"_index":403,"title":{},"body":{"injectables/TodoService.html":{}}}],["good",{"_index":525,"title":{},"body":{"index.html":{}}}],["granted",{"_index":549,"title":{},"body":{"license.html":{}}}],["hash",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["helmet",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":543,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":548,"title":{},"body":{"license.html":{}}}],["holders",{"_index":597,"title":{},"body":{"license.html":{}}}],["hs256",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["httponly",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["implements",{"_index":306,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implied",{"_index":587,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["included",{"_index":582,"title":{},"body":{"license.html":{}}}],["including",{"_index":561,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":302,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["information",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":47,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{},"coverage.html":{}}}],["injectables",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{},"overview.html":{}}}],["inputs",{"_index":295,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["inputted",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["insert",{"_index":391,"title":{},"body":{"injectables/TodoService.html":{}}}],["interfacing",{"_index":513,"title":{},"body":{"index.html":{}}}],["isempty",{"_index":412,"title":{},"body":{"injectables/TodoService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isempty(newdata",{"_index":437,"title":{},"body":{"injectables/TodoService.html":{}}}],["jwt",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["jwt.guard",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt.strategy",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":94,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":276,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["jwtmodule",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":136,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":586,"title":{},"body":{"license.html":{}}}],["knows",{"_index":533,"title":{},"body":{"index.html":{}}}],["learning",{"_index":516,"title":{},"body":{"index.html":{}}}],["liability",{"_index":601,"title":{},"body":{"license.html":{}}}],["liable",{"_index":598,"title":{},"body":{"license.html":{}}}],["license",{"_index":542,"title":{"license.html":{}},"body":{"index.html":{}}}],["limitation",{"_index":562,"title":{},"body":{"license.html":{}}}],["limited",{"_index":588,"title":{},"body":{"license.html":{}}}],["listtodos",{"_index":332,"title":{},"body":{"controllers/TodoController.html":{}}}],["listtodos(@req",{"_index":358,"title":{},"body":{"controllers/TodoController.html":{}}}],["listtodos(req",{"_index":347,"title":{},"body":{"controllers/TodoController.html":{}}}],["local",{"_index":292,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.guard",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["local.strategy",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":96,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":137,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["logging",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@req",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":590,"title":{},"body":{"license.html":{}}}],["merge",{"_index":566,"title":{},"body":{"license.html":{}}}],["message",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["metadata",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["miscellaneous",{"_index":495,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":565,"title":{},"body":{"license.html":{}}}],["module",{"_index":29,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{}}}],["modules",{"_index":31,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["moment().add(1",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["moment.unix(user.refreshtokenexp).isafter",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["much",{"_index":517,"title":{},"body":{"index.html":{}}}],["name",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["nest.js",{"_index":534,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{},"coverage.html":{}}}],["newdata",{"_index":407,"title":{},"body":{"injectables/TodoService.html":{}}}],["newer",{"_index":514,"title":{},"body":{"index.html":{}}}],["newt",{"_index":507,"title":{},"body":{"index.html":{}}}],["newtykins",{"_index":546,"title":{},"body":{"license.html":{}}}],["nonetheless",{"_index":528,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":594,"title":{},"body":{"license.html":{}}}],["normal",{"_index":284,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["notice",{"_index":580,"title":{},"body":{"license.html":{}}}],["null",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":387,"title":{},"body":{"injectables/TodoService.html":{}}}],["o",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(o).every((x",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtaining",{"_index":553,"title":{},"body":{"license.html":{}}}],["omit",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["one",{"_index":524,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":300,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["otherwise",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{},"license.html":{}}}],["out",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"license.html":{},"overview.html":{}}}],["overdone",{"_index":521,"title":{},"body":{"index.html":{}}}],["overview",{"_index":613,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":432,"title":{},"body":{"injectables/TodoService.html":{}}}],["ownerid",{"_index":414,"title":{},"body":{"injectables/TodoService.html":{}}}],["package",{"_index":467,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["parameters",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["params",{"_index":339,"title":{},"body":{"controllers/TodoController.html":{}}}],["params.id",{"_index":363,"title":{},"body":{"controllers/TodoController.html":{}}}],["parseint(todoid",{"_index":417,"title":{},"body":{"injectables/TodoService.html":{}}}],["parser",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":408,"title":{},"body":{"injectables/TodoService.html":{}}}],["particular",{"_index":592,"title":{},"body":{"license.html":{}}}],["passport",{"_index":267,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":268,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["passportstrategy(strategy",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["passreqtocallback",{"_index":316,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["passthrough",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["patch",{"_index":353,"title":{},"body":{"controllers/TodoController.html":{}}}],["patch('/:id",{"_index":370,"title":{},"body":{"controllers/TodoController.html":{}}}],["payload",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["payload.token",{"_index":317,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["payload.username",{"_index":322,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["permission",{"_index":547,"title":{},"body":{"license.html":{}}}],["permit",{"_index":573,"title":{},"body":{"license.html":{}}}],["person",{"_index":552,"title":{},"body":{"license.html":{}}}],["persons",{"_index":574,"title":{},"body":{"license.html":{}}}],["portions",{"_index":584,"title":{},"body":{"license.html":{}}}],["post",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{}}}],["post('login",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgresql",{"_index":535,"title":{},"body":{"index.html":{}}}],["practice",{"_index":509,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{}}}],["prisma",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"index.html":{}}}],["prisma/client",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/TodoService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":298,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":138,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["process.env.access_secret",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["project",{"_index":522,"title":{},"body":{"index.html":{}}}],["promise",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TodoService.html":{}}}],["properties",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["provided",{"_index":423,"title":{},"body":{"injectables/TodoService.html":{},"license.html":{}}}],["providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{}}}],["prune",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["pruned",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["pruneduser",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":567,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":593,"title":{},"body":{"license.html":{}}}],["put",{"_index":436,"title":{},"body":{"injectables/TodoService.html":{}}}],["pwd",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["rand",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["randomtoken",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomtoken.generate(16",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["re",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}}}],["reauthenticated",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["refrehs",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["refres",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshStrategy.html":{}}}],["refresh(@req",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(req",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh.guard",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh.strategy",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{}}}],["refreshauthguard",{"_index":98,"title":{"injectables/RefreshAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshAuthGuard.html":{},"coverage.html":{}}}],["refreshstrategy",{"_index":139,"title":{"injectables/RefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokenexp",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(username",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["registered",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["registers",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["req",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{}}}],["req.user",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.id",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["req?.cookies['auth",{"_index":278,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["request",{"_index":270,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["requested",{"_index":399,"title":{},"body":{"injectables/TodoService.html":{}}}],["res",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"overview.html":{}}}],["response",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["restriction",{"_index":560,"title":{},"body":{"license.html":{}}}],["result",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["rights",{"_index":563,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["running",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["rxjs",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":275,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["see",{"_index":540,"title":{},"body":{"index.html":{}}}],["sell",{"_index":571,"title":{},"body":{"license.html":{}}}],["server",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["shall",{"_index":581,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["skill",{"_index":527,"title":{},"body":{"index.html":{}}}],["software",{"_index":555,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["src/.../auth.service.ts",{"_index":618,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../helper.ts",{"_index":498,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":502,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":49,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":50,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:64",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.service.ts:132",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:142",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:62",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:95",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.guard",{"_index":354,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/auth/jwt.guard.ts",{"_index":255,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:22",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.guard.ts",{"_index":285,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":287,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":291,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":289,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/refresh.guard.ts",{"_index":310,"title":{},"body":{"injectables/RefreshAuthGuard.html":{},"coverage.html":{}}}],["src/auth/refresh.strategy.ts",{"_index":312,"title":{},"body":{"injectables/RefreshStrategy.html":{},"coverage.html":{}}}],["src/auth/refresh.strategy.ts:24",{"_index":315,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["src/auth/refresh.strategy.ts:8",{"_index":313,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["src/helper",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["src/helper.ts",{"_index":454,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["src/prisma.service.ts",{"_index":297,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":303,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":305,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/todo/todo.controller.ts",{"_index":327,"title":{},"body":{"controllers/TodoController.html":{},"coverage.html":{}}}],["src/todo/todo.controller.ts:22",{"_index":349,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:29",{"_index":346,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:36",{"_index":336,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:43",{"_index":341,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:50",{"_index":352,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.module.ts",{"_index":380,"title":{},"body":{"modules/TodoModule.html":{}}}],["src/todo/todo.service.ts",{"_index":382,"title":{},"body":{"injectables/TodoService.html":{},"coverage.html":{}}}],["src/todo/todo.service.ts:107",{"_index":394,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:12",{"_index":385,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:134",{"_index":409,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:15",{"_index":411,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:24",{"_index":401,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:34",{"_index":404,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:45",{"_index":398,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:74",{"_index":388,"title":{},"body":{"injectables/TodoService.html":{}}}],["started",{"_index":504,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":375,"title":{},"body":{"controllers/TodoController.html":{}}}],["strategy",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TodoService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":576,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":569,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":583,"title":{},"body":{"license.html":{}}}],["super",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["support",{"_index":610,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":611,"title":{},"body":{"modules.html":{}}}],["table",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["technologies",{"_index":515,"title":{},"body":{"index.html":{}}}],["text",{"_index":373,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["thing",{"_index":506,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":307,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":308,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.getstatus",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getjwttoken(req.user",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getrefreshtoken",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getrefreshtoken(req.user",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logger.log",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(body.username",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validaterefreshtoken",{"_index":321,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["this.authservice.validateuser(username",{"_index":296,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.gettodo(userid",{"_index":431,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.getuser(todo.ownerid",{"_index":433,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.getuser(userid",{"_index":424,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.jwtservice.sign(user",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log",{"_index":426,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.logger.log(`${formatuserlog(user",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.todo.create",{"_index":425,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.delete",{"_index":434,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.findmany",{"_index":413,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.findunique",{"_index":416,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.update",{"_index":440,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.user",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findunique",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["this.prisma.user.update",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.todoservice.createtodo(req.user.id",{"_index":365,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.deletetodo(req.user.id",{"_index":369,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.gettodo(req.user.id",{"_index":362,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.getusertodos(req.user.id",{"_index":359,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.updatetodo(req.user.id",{"_index":372,"title":{},"body":{"controllers/TodoController.html":{}}}],["throw",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{}}}],["todo",{"_index":328,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["todo's",{"_index":396,"title":{},"body":{"injectables/TodoService.html":{}}}],["todo.controller",{"_index":381,"title":{},"body":{"modules/TodoModule.html":{}}}],["todo.id",{"_index":428,"title":{},"body":{"injectables/TodoService.html":{}}}],["todo.ownerid",{"_index":422,"title":{},"body":{"injectables/TodoService.html":{}}}],["todo.service",{"_index":356,"title":{},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{}}}],["todo/todo.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["todocontroller",{"_index":326,"title":{"controllers/TodoController.html":{}},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{},"coverage.html":{}}}],["todoid",{"_index":393,"title":{},"body":{"injectables/TodoService.html":{}}}],["todomodule",{"_index":37,"title":{"modules/TodoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TodoModule.html":{},"modules.html":{},"overview.html":{}}}],["todos",{"_index":405,"title":{},"body":{"injectables/TodoService.html":{},"index.html":{}}}],["todoservice",{"_index":355,"title":{"injectables/TodoService.html":{}},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{},"overview.html":{}}}],["todostatus",{"_index":497,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["token",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["tort",{"_index":605,"title":{},"body":{"license.html":{}}}],["true",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshStrategy.html":{}}}],["type",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":616,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":510,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":269,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TodoService.html":{}}}],["unknown",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["update",{"_index":439,"title":{},"body":{"injectables/TodoService.html":{}}}],["updated",{"_index":441,"title":{},"body":{"injectables/TodoService.html":{}}}],["updates",{"_index":410,"title":{},"body":{"injectables/TodoService.html":{}}}],["updatetodo",{"_index":333,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["updatetodo(@req",{"_index":371,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodo(req",{"_index":350,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodo(userid",{"_index":406,"title":{},"body":{"injectables/TodoService.html":{}}}],["use",{"_index":564,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{}}}],["useguards(jwtauthguard",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{}}}],["useguards(jwtauthguard)@delete('/:id",{"_index":340,"title":{},"body":{"controllers/TodoController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":348,"title":{},"body":{"controllers/TodoController.html":{}}}],["useguards(jwtauthguard)@get('/:id",{"_index":345,"title":{},"body":{"controllers/TodoController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@patch('/:id",{"_index":351,"title":{},"body":{"controllers/TodoController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":335,"title":{},"body":{"controllers/TodoController.html":{}}}],["useguards(localauthguard",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshauthguard",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshauthguard)@get('refresh",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{},"injectables/TodoService.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["user.id",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"miscellaneous/variables.html":{}}}],["user.password",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":390,"title":{},"body":{"injectables/TodoService.html":{}}}],["username",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["users",{"_index":538,"title":{},"body":{"index.html":{}}}],["valid",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["validate",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["validate(payload",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req",{"_index":314,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["validate(username",{"_index":290,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validaterefreshtoken",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["validaterefreshtoken(username",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["validpassword",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":619,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["very",{"_index":519,"title":{},"body":{"index.html":{}}}],["wanted",{"_index":508,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":589,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":585,"title":{},"body":{"license.html":{}}}],["whether",{"_index":602,"title":{},"body":{"license.html":{}}}],["without",{"_index":559,"title":{},"body":{"license.html":{}}}],["x",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    getStatus(): string {\n        return this.appService.getStatus();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTodoModule\n\nTodoModule\n\nAppModule -->\n\nTodoModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TodoModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TodoModule } from './todo/todo.module';\n\n@Module({\n    imports: [AuthModule, TodoModule],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n    getStatus(): string {\n        return 'Server running!';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n                    GET /api/auth/profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n                    POST /api/auth/login\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshAuthGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:64\n                \n            \n\n\n            \n                \n                    GET /api/auth/refresh\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n                    POST /api/auth/register\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Req,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { formatUserLog } from 'src/helper';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './jwt.guard';\nimport { LocalAuthGuard } from './local.guard';\nimport { RefreshAuthGuard } from './refresh.guard';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    /** POST /api/auth/register */\n    @Post('register')\n    register(@Body() body) {\n        return this.authService.register(body.username, body.password);\n    }\n\n    /** POST /api/auth/login */\n    @UseGuards(LocalAuthGuard)\n    @Post('login')\n    async login(@Req() req, @Res({ passthrough: true }) res: Response) {\n        const token = this.authService.getJwtToken(req.user);\n        const refreshToken = await this.authService.getRefreshToken(\n            req.user.id,\n        );\n\n        res.cookie(\n            'auth-cookie',\n            {\n                token,\n                refreshToken,\n            },\n            { httpOnly: true },\n        );\n\n        this.authService.logger.log(\n            `${formatUserLog(req.user)} authenticated!`,\n        );\n\n        return {\n            message: `Authenticated as ${formatUserLog(req.user)}!`,\n        };\n    }\n\n    /** GET /api/auth/profile */\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    getProfile(@Req() req) {\n        return req.user;\n    }\n\n    /** GET /api/auth/refresh */\n    @UseGuards(RefreshAuthGuard)\n    @Get('refresh')\n    async refresh(@Req() req, @Res({ passthrough: true }) res: Response) {\n        const token = this.authService.getJwtToken(req.user);\n        const refreshToken = await this.authService.getRefreshToken(req.user);\n\n        res.cookie(\n            'auth-cookie',\n            {\n                token,\n                refreshToken,\n            },\n            { httpOnly: true },\n        );\n\n        this.authService.logger.log(\n            `${formatUserLog(req.user)} re-authenticated!`,\n        );\n\n        return {\n            message: `Reauthenticated as ${formatUserLog(req.user)}!`,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\nRefreshStrategy\n\nRefreshStrategy\n\nAuthModule -->\n\nRefreshStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RefreshStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\nimport { PrismaService } from 'src/prisma.service';\nimport { AuthController } from './auth.controller';\nimport { RefreshStrategy } from './refresh.strategy';\n\n@Module({\n    imports: [\n        PassportModule,\n        JwtModule.register({\n            secret: process.env.ACCESS_SECRET,\n            signOptions: { expiresIn: '1m', algorithm: 'HS256' },\n        }),\n    ],\n    providers: [\n        PrismaService,\n        AuthService,\n        LocalStrategy,\n        JwtStrategy,\n        RefreshStrategy,\n    ],\n    controllers: [AuthController],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getJwtToken\n                            \n                            \n                                    Async\n                                getRefreshToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateRefreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getJwtToken\n                        \n                    \n                \n            \n            \n                \ngetJwtToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:132\n                \n            \n\n\n            \n                \n                    Generates a JWT token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to generate the token for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The generated JWT token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRefreshToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:142\n                \n            \n\n\n            \n                \n                    Generates a refrehs token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to generate the token for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The generated refresh token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:95\n                \n            \n\n\n            \n                \n                    Registers a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user's username\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user's password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A pruned version of the user's data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateRefreshToken(username: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n                    Checks the inputted username and refresh token against the database to ensure that it is valid.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The inputted username\n\n                                    \n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The inputted refresh token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        If the data is valid, it returns a pruned version of the user's data. Otherwise, it returns null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n                    Checks inputted data against the database to ensure that it is valid.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The inputted username\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The inputted password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        If the data is valid, it returns a pruned version of the user's data. Otherwise, it returns null\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger()\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport * as bcrypt from 'bcrypt';\nimport { User } from '@prisma/client';\nimport { JwtService } from '@nestjs/jwt';\nimport * as randomToken from 'rand-token';\nimport * as moment from 'moment';\nimport { formatUserLog } from 'src/helper';\n\ntype PrunedUser = Omit, 'refreshToken'>,\n    'refreshTokenExp'\n>;\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly prisma: PrismaService,\n        private readonly jwtService: JwtService,\n    ) {}\n\n    readonly logger = new Logger();\n\n    /**\n     * Checks inputted data against the database to ensure that it is valid.\n     * @param username The inputted username\n     * @param password The inputted password\n     * @returns If the data is valid, it returns a pruned version of the user's data. Otherwise, it returns null\n     * @async\n     */\n    async validateUser(\n        username: string,\n        password: string,\n    ): Promise {\n        const user = await this.prisma.user.findUnique({ where: { username } });\n\n        if (user) {\n            // Ensure that the inputted password is valid\n            const validPassword = await bcrypt.compare(password, user.password);\n\n            if (validPassword) {\n                // Prune the data\n                const { password, refreshToken, refreshTokenExp, ...result } =\n                    user;\n\n                return result;\n            } else {\n                throw new BadRequestException('Wrong credentials!');\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks the inputted username and refresh token against the database to ensure that it is valid.\n     * @param username The inputted username\n     * @param refreshToken The inputted refresh token\n     * @returns If the data is valid, it returns a pruned version of the user's data. Otherwise, it returns null\n     * @async\n     */\n    async validateRefreshToken(\n        username: string,\n        refreshToken: string,\n    ): Promise {\n        const user = await this.prisma.user.findUnique({ where: { username } });\n\n        if (user) {\n            // Ensure that the inputted refres token is valid\n            if (refreshToken === user.refreshToken) {\n                if (moment.unix(user.refreshTokenExp).isAfter()) {\n                    // Prune the data\n                    const {\n                        password,\n                        refreshToken,\n                        refreshTokenExp,\n                        ...result\n                    } = user;\n\n                    return result;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Registers a user\n     * @param username The user's username\n     * @param password The user's password\n     * @returns A pruned version of the user's data.\n     * @async\n     */\n    async register(username: string, password: string): Promise {\n        // Generate salt and hash the password\n        const salt = await bcrypt.genSalt(10);\n        const hashedPassword = await bcrypt.hash(password, salt);\n\n        // Create the user\n        const user = await this.prisma.user\n            .create({\n                data: {\n                    username,\n                    password: hashedPassword,\n                },\n            })\n            .catch(() => {\n                throw new BadRequestException(\n                    `An account with the username ${username} already exists!`,\n                );\n            });\n\n        this.logger.log(`${formatUserLog(user)} registered!`);\n\n        // Prune the data\n        const {\n            password: pwd,\n            refreshToken,\n            refreshTokenExp,\n            ...userData\n        } = user;\n\n        return userData;\n    }\n\n    /**\n     * Generates a JWT token\n     * @param user The user to generate the token for\n     * @returns The generated JWT token\n     */\n    getJwtToken(user: User) {\n        return this.jwtService.sign(user);\n    }\n\n    /**\n     * Generates a refrehs token\n     * @param user The user to generate the token for\n     * @returns The generated refresh token\n     * @async\n     */\n    async getRefreshToken(user: User): Promise {\n        // Generate the token and expiry date\n        const refreshToken = randomToken.generate(16);\n        const refreshTokenExp = moment().add(1, 'day').unix();\n\n        // Add it to the database\n        await this.prisma.user.update({\n            where: {\n                id: user.id,\n            },\n            data: {\n                refreshToken,\n                refreshTokenExp,\n            },\n        });\n\n        return refreshToken;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor() {\n        super({\n            ignoreExpiration: false,\n            secretOrKey: process.env.ACCESS_SECRET,\n            jwtFromRequest: ExtractJwt.fromExtractors([\n                (req: Request) => {\n                    const data = req?.cookies['auth-cookie'];\n                    return data ? data.token : null;\n                },\n            ]),\n            algorithms: ['HS256'],\n        });\n    }\n\n    async validate(payload: any) {\n        // If there is no authenticated user, ensure they can not access the endpoint\n        if (payload === null) {\n            throw new UnauthorizedException();\n        }\n\n        // Otherwise, continue as normal\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy, 'local') {\n    constructor(private authService: AuthService) {\n        super();\n    }\n\n    async validate(username: string, password: string): Promise {\n        // Attempt to validate the user by comparing inputs with the database\n        const user = await this.authService.validateUser(username, password);\n\n        // If the user is not valid, ensure they can not access the endpoint\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n\n        // Otherwise, continue as normal\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n    async onModuleInit() {\n        await this.$connect();\n    }\n\n    async enableShutdownHooks(app: INestApplication) {\n        this.$on('beforeExit', async () => {\n            await app.close();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshAuthGuard.html":{"url":"injectables/RefreshAuthGuard.html","title":"injectable - RefreshAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RefreshAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshAuthGuard extends AuthGuard('refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshStrategy.html":{"url":"injectables/RefreshStrategy.html","title":"injectable - RefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/refresh.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/refresh.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class RefreshStrategy extends PassportStrategy(Strategy, 'refresh') {\n    constructor(private readonly authService: AuthService) {\n        super({\n            passReqToCallback: true,\n            ignoreExpiration: true,\n            secretOrKey: process.env.ACCESS_SECRET,\n            jwtFromRequest: ExtractJwt.fromExtractors([\n                (req: Request) => {\n                    const payload = req?.cookies['auth-cookie'];\n                    return payload ? payload.token : null;\n                },\n            ]),\n            algorithms: ['HS256'],\n        });\n    }\n\n    async validate(req: Request, payload: any) {\n        // If there is no authenticated user, ensure that they can not refresh\n        if (payload === null) {\n            throw new BadRequestException('Invalid JWT token!');\n        }\n\n        // Ensure that the refresh token exists, and validate it against the DB\n        let cookie = req?.cookies['auth-cookie'];\n\n        if (!cookie?.refreshToken) {\n            throw new BadRequestException('Invalid refresh token!');\n        }\n\n        const user = await this.authService.validateRefreshToken(\n            payload.username,\n            cookie.refreshToken,\n        );\n\n        // If the refresh token has expired, ensure that they can not refresh\n        if (!user) {\n            throw new BadRequestException('Refresh token has expired!');\n        }\n\n        // Otherwise, continue as normal\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodoController.html":{"url":"controllers/TodoController.html","title":"controller - TodoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/todo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTodo\n                            \n                            \n                                    Async\n                                deleteTodo\n                            \n                            \n                                    Async\n                                getTodo\n                            \n                            \n                                    Async\n                                listTodos\n                            \n                            \n                                    Async\n                                updateTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTodo(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:36\n                \n            \n\n\n            \n                \n                    POST /api/todo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTodo(req, params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:43\n                \n            \n\n\n            \n                \n                    DELETE /api/todo/:id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodo(req, params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:29\n                \n            \n\n\n            \n                \n                    GET /api/todo/:id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listTodos\n                        \n                    \n                \n            \n            \n                \n                    \n                    listTodos(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:22\n                \n            \n\n\n            \n                \n                    GET /api/todo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTodo(req, params, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('/:id')\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:50\n                \n            \n\n\n            \n                \n                    PATCH /api/todo/:id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Patch,\n    Post,\n    Req,\n    UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/jwt.guard';\nimport { TodoService } from './todo.service';\n\n@Controller('todo')\nexport class TodoController {\n    constructor(private todoService: TodoService) {}\n\n    /** GET /api/todo */\n    @UseGuards(JwtAuthGuard)\n    @Get()\n    async listTodos(@Req() req) {\n        return await this.todoService.getUserTodos(req.user.id);\n    }\n\n    /** GET /api/todo/:id */\n    @UseGuards(JwtAuthGuard)\n    @Get('/:id')\n    async getTodo(@Req() req, @Param() params) {\n        return await this.todoService.getTodo(req.user.id, params.id);\n    }\n\n    /** POST /api/todo */\n    @UseGuards(JwtAuthGuard)\n    @Post()\n    async createTodo(@Req() req, @Body() body) {\n        return await this.todoService.createTodo(req.user.id, body.todo);\n    }\n\n    /** DELETE /api/todo/:id */\n    @UseGuards(JwtAuthGuard)\n    @Delete('/:id')\n    async deleteTodo(@Req() req, @Param() params) {\n        return await this.todoService.deleteTodo(req.user.id, params.id);\n    }\n\n    /** PATCH /api/todo/:id */\n    @UseGuards(JwtAuthGuard)\n    @Patch('/:id')\n    async updateTodo(@Req() req, @Param() params, @Body() body) {\n        return await this.todoService.updateTodo(req.user.id, params.id, {\n            text: body.text,\n            status: body.status,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TodoModule.html":{"url":"modules/TodoModule.html","title":"module - TodoModule","body":"\n                   \n\n\n\n\n    Modules\n    TodoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TodoModule\n\n\n\ncluster_TodoModule_exports\n\n\n\ncluster_TodoModule_providers\n\n\n\n\nTodoService \n\nTodoService \n\n\n\nTodoModule\n\nTodoModule\n\nTodoService  -->\n\nTodoModule->TodoService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nTodoModule -->\n\nPrismaService->TodoModule\n\n\n\n\n\nTodoService\n\nTodoService\n\nTodoModule -->\n\nTodoService->TodoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/todo/todo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            TodoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TodoController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TodoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TodoService } from './todo.service';\nimport { TodoController } from './todo.controller';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n    providers: [TodoService, PrismaService],\n    controllers: [TodoController],\n    exports: [TodoService],\n})\nexport class TodoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodoService.html":{"url":"injectables/TodoService.html","title":"injectable - TodoService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TodoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/todo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTodo\n                            \n                            \n                                    Async\n                                deleteTodo\n                            \n                            \n                                    Async\n                                getTodo\n                            \n                            \n                                    Private\n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserTodos\n                            \n                            \n                                    Async\n                                updateTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/todo/todo.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTodo(userId: number, text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:74\n                \n            \n\n\n            \n                \n                    Creates a todo.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user's ID\n\n                                    \n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to insert into the todo\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The todo\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTodo(userId: number, todoId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:107\n                \n            \n\n\n            \n                \n                    Deletes a todo.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The authenticated user's ID\n\n                                    \n                                \n                                \n                                    todoId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The todo's ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The todo, if the user has access to it\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodo(userId: number, todoId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:45\n                \n            \n\n\n            \n                \n                    Get a todo by its ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The authenticated user's ID\n\n                                    \n                                \n                                \n                                    todoId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The requested todo's ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The todo, if the authenticated user has access to it\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:24\n                \n            \n\n\n            \n                \n                    Gets a user by their ID.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user's ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The user's data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserTodos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserTodos(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:34\n                \n            \n\n\n            \n                \n                    Gets a user's todos.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user's ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The user's todos\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTodo(userId: number, todoId: string, newData: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:134\n                \n            \n\n\n            \n                \n                    Updates a todo.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The authenticated user's ID\n\n                                    \n                                \n                                \n                                    todoId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The todo's ID\n\n                                    \n                                \n                                \n                                    newData\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The data to insert into the todo\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The todo, if the user has access to it\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger()\n                    \n                \n                    \n                        \n                                Defined in src/todo/todo.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    Logger,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { Todo } from '@prisma/client';\nimport { formatUserLog, isEmpty } from 'src/helper';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class TodoService {\n    constructor(private readonly prisma: PrismaService) {}\n\n    readonly logger = new Logger();\n\n    /**\n     * Gets a user by their ID.\n     * @param userId The user's ID\n     * @returns The user's data\n     * @async\n     * @private\n     */\n    private async getUser(userId: number) {\n        return await this.prisma.user.findUnique({ where: { id: userId } });\n    }\n\n    /**\n     * Gets a user's todos.\n     * @param userId The user's ID\n     * @returns The user's todos\n     * @async\n     */\n    async getUserTodos(userId: number) {\n        return await this.prisma.todo.findMany({ where: { ownerId: userId } });\n    }\n\n    /**\n     * Get a todo by its ID.\n     * @param userId The authenticated user's ID\n     * @param todoId The requested todo's ID\n     * @returns The todo, if the authenticated user has access to it\n     * @async\n     */\n    async getTodo(userId: number, todoId: string): Promise {\n        // Finds the todo in the database\n        const todo = await this.prisma.todo.findUnique({\n            where: { id: parseInt(todoId) },\n        });\n\n        // If the todo does not exist in the database, throw an error\n        if (!todo) {\n            throw new BadRequestException('The requested todo does not exist!');\n        }\n\n        // If the authenticated user does not have access to the found todo, throw an error\n        if (todo.ownerId !== userId) {\n            throw new BadRequestException(\n                'The authenticated user does not have access to the requested todo!',\n            );\n        }\n\n        // Otherwise, return the todo\n        return todo;\n    }\n\n    /**\n     * Creates a todo.\n     * @param userId The user's ID\n     * @param text The text to insert into the todo\n     * @returns The todo\n     * @async\n     */\n    async createTodo(userId: number, text: string): Promise {\n        // Ensure that the text was provided\n        if (!text) {\n            throw new BadRequestException(\n                \"A 'todo' text must be provided in the body!\",\n            );\n        }\n\n        // Get the user's data\n        const user = await this.getUser(userId);\n\n        // Create the todo in the database\n        const todo = await this.prisma.todo.create({\n            data: {\n                ownerId: user.id,\n                text,\n            },\n        });\n\n        this.logger.log(\n            `Created todo with ID ${todo.id} for ${formatUserLog(user)}`,\n        );\n\n        return todo;\n    }\n\n    /**\n     * Deletes a todo.\n     * @param userId The authenticated user's ID\n     * @param todoId The todo's ID\n     * @returns The todo, if the user has access to it\n     * @async\n     */\n    async deleteTodo(userId: number, todoId: string): Promise {\n        // Find the todo\n        const todo = await this.getTodo(userId, todoId);\n\n        // Get data about the todo's owner\n        const user = await this.getUser(todo.ownerId);\n\n        // Delete the todo\n        await this.prisma.todo.delete({\n            where: { id: todo.id },\n        });\n\n        this.logger.log(\n            `Deleted todo with ID ${todo.id} for ${formatUserLog(user)}`,\n        );\n\n        return todo;\n    }\n\n    /**\n     * Updates a todo.\n     * @param userId The authenticated user's ID\n     * @param todoId The todo's ID\n     * @param newData The data to insert into the todo\n     * @returns The todo, if the user has access to it\n     * @async\n     */\n    async updateTodo(userId: number, todoId: string, newData: Partial) {\n        // Ensure that there is data to put into the todo\n        if (isEmpty(newData)) {\n            throw new BadRequestException(\n                'The body must contain some data to update the todo with!',\n            );\n        }\n\n        // Find the todo\n        const todo = await this.getTodo(userId, todoId);\n\n        // Get data about the todo's owner\n        const user = await this.getUser(todo.ownerId);\n\n        // Update the todo\n        await this.prisma.todo.update({\n            where: { id: todo.id },\n            data: { ...newData },\n        });\n\n        this.logger.log(\n            `Updated todo with ID ${todo.id} for ${formatUserLog(user)}`,\n        );\n\n        return todo;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/auth/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/refresh.guard.ts\n            \n            injectable\n            RefreshAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/refresh.strategy.ts\n            \n            injectable\n            RefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/helper.ts\n            \n            variable\n            formatUserLog\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helper.ts\n            \n            variable\n            isEmpty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/todo/todo.controller.ts\n            \n            controller\n            TodoController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/todo/todo.service.ts\n            \n            injectable\n            TodoService\n            \n                66 %\n                (6/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @prisma/client : ^2.28.0\n        \n            bcrypt : ^5.0.1\n        \n            body-parser : ^1.19.0\n        \n            cookie-parser : ^1.4.5\n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            helmet : ^4.6.0\n        \n            moment : ^2.29.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            rand-token : ^1.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TodoStatus   (src/.../helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helper.ts\n    \n        \n            \n                \n                    \n                        \n                        TodoStatus\n                    \n                \n                        \n                            \n                                 Todo\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n    \n    todo api\n\n\nWhy is this a thing?\nnewt wanted to practice typescript express api development alongside interfacing with newer technologies they have been learning that they do not have much experience with.\na very cliche and overdone project, but a fun one and a good one to demonstrate skill nonetheless.\na front-end may be coming eventually, who knows.\nTechnologies\n\n  TypeScript\n  Nest.js\n  Prisma\n  PostgreSQL\n  passport\n\nChecklist\n\n  Allow users to collaborate on todos\n\nSee the code's license here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright 2021 newtykins\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TodoModule\n\n\n\ncluster_TodoModule_exports\n\n\n\ncluster_TodoModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTodoModule\n\nTodoModule\n\nAppModule -->\n\nTodoModule->AppModule\n\n\n\n\n\nTodoService \n\nTodoService \n\nTodoService  -->\n\nTodoModule->TodoService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nTodoModule -->\n\nPrismaService->TodoModule\n\n\n\n\n\nRefreshStrategy\n\nRefreshStrategy\n\nAuthModule -->\n\nRefreshStrategy->AuthModule\n\n\n\n\n\nTodoService\n\nTodoService\n\nTodoModule -->\n\nTodoService->TodoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PrunedUser   (src/.../auth.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    PrunedUser\n                \n            \n            \n                \n                        Omit, refreshToken> | refreshTokenExp>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            formatUserLog   (src/.../helper.ts)\n                        \n                        \n                            isEmpty   (src/.../helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatUserLog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (user: User): string =>\n    `User ${user.username} (ID: ${user.id})`\n                    \n                \n\n            \n                \n                    Formats information about a user for easy logging.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmpty\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (o: any): boolean =>\n    Object.values(o).every((x) => x === null || x === '' || !x)\n                    \n                \n\n            \n                \n                    Checks if an object is empty\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
